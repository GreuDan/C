/*13. Scrieţi algoritmul care interclasează două tablouri unidimensionale de tip întreg. Folosiţi pointeri.
Ex: A = 1 3 5 7 9
B = 2 4 6 8
out: 1 2 3 4 5 6 7 8 9 */
/*GREU DAN IOAN*/
#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
void afisare(int*, int*, int*, int, int);
int main()
{
	int v[100], a1[100], * p, * k, * z, n, n1;
	p = v;
	k = a1;
	printf("introduceti dimensiunea primului vector:");
	scanf("%i", &n);
	printf("\nintroduceti elementele:");
	for (int i = 0; i < n; i++)
		scanf("%i", (p + i));
	printf("\nintroduceti dimensiunea celui de-al doilea  vector:");
	scanf("%i", &n1);
	printf("\nintroduceti elementele:");
	for (int i = 0; i < n1; i++)
		scanf("%i", (k + i));
	z = (int*)malloc((n + n1) * sizeof(int));
	printf("\nvectorul obtinut este:");
	afisare(p, k, z, n, n1);
	return 0;
	/*2019*/

}
void afisare(int* p, int* k, int* z, int n, int n1)
{
	int aux;
	for (int i = 0; i < n; i++)
		*(z + i) = *(p + i);
	int j = n;
	int i = 0;
	for (j = n; j < (n1 + n); j++)
	{
		*(z + j) = *(k + i);
		i++;
	}
	for (int i = 0; i < (n + n1); i++)
	{
		int j = 0;

		while (j < (n + n1))
		{

			if (*(z + i) < * (z + j))
			{
				aux = *(z + i);
				*(z + i) = *(z + j);
				*(z + j) = aux;
			}
			j++;
		}
	}
	for (int i = 0; i < (n1 + n); i++)
	{
		printf("%i ", *(z + i));
	}
}